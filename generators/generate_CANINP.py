# Generate descriptor file for CANACE8C, CANACE8CMIO, CANTOTI and CANINP: modules.
# Use this script to avoid duplication and reduce maintenance.

import json
import sys
from sys import argv
from datetime import datetime, timezone
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-v", "--version", help="Firmware version")
parser.add_argument("-t", "--type", help="Module type")
args = parser.parse_args()

# default capabilities
moduleName = "CANACE8C"
channels = 8

if args.type == "MIO":
    moduleName = "CANACE8MIO"
if args.type == "INP":
    moduleName = "CANINP"
if args.type == "TOTI":
    moduleName = "CANTOTI"

now = datetime.now(timezone.utc)
datestring = f"{now.year}{now.month:02}{now.day:02}{now.hour:02}{now.minute:02}"
commandLine = " ".join(argv)

data = {
    "generated": f"Generated by {commandLine}",
    "timestamp": datestring,
    "moduleName": moduleName,
    "numberOfChannels": channels,
    "channelNames": {str(ch): f"Input {ch}" for ch in range(1, channels + 1)},
    "nodeVariables": [
        {
            "type": "NodeVariableGroup",
            "displayTitle": "General",
            "groupItems": [
                {
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": 4,
                    "displayTitle": "ON Delay",
                    "displayScale": 10,
                    "displayUnits": "Milli Seconds"
                },
                {
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": 5,
                    "displayTitle": "OFF Delay",
                    "displayScale": 10,
                    "displayUnits": "Milli Seconds"
                }
            ]
        }
    ] + [
        {
            "type": "NodeVariableGroup",
            "displayTitle": f"${{channel {ch}}}",
            "groupItems": [
                {
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 1,
                    "displayTitle": "On Only",
                    "bit": ch - 1
                },
                {
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 2,
                    "displayTitle": "Invert",
                    "bit": ch - 1
                },
                {
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 3,
                    "displayTitle": "Toggle",
                    "bit": ch - 1
                },
                {
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 6,
                    "displayTitle": "Delay",
                    "bit": ch - 1
                },
                {
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 7,
                    "displayTitle": "Route Setting",
                    "bit": ch - 1
                },
                {
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 8,
                    "displayTitle": "Disable SOD",
                    "bit": ch - 1
                }
            ]
        } for ch in range(1, channels + 1)
    ],
    "eventVariables": [
        {
            "type": "EventVariableSelect",
            "eventVariableIndex": 1,
            "displayTitle": "Options",
            "options": [
                {
                    "label": "Start of Day event",
                    "value": 0
                },
                {
                    "label": "Route event",
                    "value": 1
                }
            ] + [
                {
                    "label": f"${{channel {ch}}}",
                    "value": ch + 7
                } for ch in range(1, channels + 1)
            ]
        }
    ]
}

json.dump(data, sys.stdout, indent=2)
print("")
