# Generate descriptor file for CANACC4/CANSP: modules.
# Use this script to avoid duplication and reduce maintenance.

import json
import sys
from sys import argv
from datetime import datetime, timezone
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-v", "--version", help="Firmware version")
parser.add_argument("-t", "--type", help="Module type")
args = parser.parse_args()

# default capabilities
moduleName = "CANACC4"
solenoids = 4
hasFireDelay = True

if args.type == "SOL":
    moduleName = "CANSOL"

if args.version == "2N":
    hasFireDelay = False

now = datetime.now(timezone.utc)
datestring = f"{now.year}{now.month:02}{now.day:02}{now.hour:02}{now.minute:02}"
commandLine = " ".join(argv)

data = {
    "generated": f"Generated by {commandLine}",
    "timestamp": datestring,
    "moduleName": moduleName,
    "numberOfChannels": solenoids,
    "channelNames": {str(ch): f"Solenoid {ch}" for ch in range(1, solenoids + 1)},
    "nodeVariables": [
        {
            "type": "NodeVariableGroup",
            "displayTitle": f"${{channel {ch}}} {chr(ord('A') + side)}",
            "groupItems": [
                {
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": ch*2-1+side,
                    "displayTitle": "Pulse Duration",
                    "displayScale": 10,
                    "displayUnits": "Milli Seconds"
                }
            ]
        } for ch in range(1, solenoids + 1) for side in (0, 1)
    ] + [
        {
            "type": "NodeVariableGroup",
            "displayTitle": "General Settings",
            "groupItems": [
                {
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": 9,
                    "displayTitle": "Recharge timer",
                    "displayScale": 10,
                    "displayUnits": "Milli Seconds"
                }
            ] + ([
                {
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": 10,
                    "displayTitle": "Fire Delay",
                    "displayScale": 10,
                    "displayUnits": "Milli Seconds"
                }
            ] if hasFireDelay else [])
        }
    ],
    "eventVariables": [
        {
            "type": "EventVariableBitArray",
            "eventVariableIndex": 1,
            "displayTitle": "Output pairs active",
            "bitCollection": [
                {
                    "bitPosition": pos,
                    "label": f"${{channel {pos+1}}}"
                } for pos in range(0, 4)
            ]
        },
        {
            "type": "EventVariableBitArray",
            "eventVariableIndex": 2,
            "displayTitle": "Reverse Polarity",
            "bitCollection": [
                {
                    "bitPosition": pos,
                    "label": f"${{channel {pos+1}}}"
                } for pos in range(0, 4)
            ]
        }
    ]
}

json.dump(data, sys.stdout, indent=2)
print("")
