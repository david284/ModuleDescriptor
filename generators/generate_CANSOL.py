# Generate descriptor file for CANACC4/CANSP: modules.
# Use this script to avoid duplication and reduce maintenance.

import json
import sys
from sys import argv
from datetime import datetime, timezone
import argparse

# default capabilities
moduleName="CANACC4"

now = datetime.now(timezone.utc)
datestring = f"{now.year}{now.month:02}{now.day:02}{now.hour:02}{now.minute:02}"
commandLine = " ".join(argv)

data = {
    "generated": f"Generated by {commandLine}",
    "timestamp": datestring,
    "moduleName": moduleName,
    "nodeVariables": [
        {
            "type": "NodeVariableGroup",
            "displayTitle": f"Output {ch}",
            "groupItems": [
                {
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": ch,
                    "displayTitle": "Pulse Duration",
                    "displayScale": 10,
                    "displayUnits": "Milli Seconds"
                }
            ]
        } for ch in range(1, 8 + 1)
    ] + [
        {
            "type": "NodeVariableGroup",
            "displayTitle": "General Settings",
            "groupItems": [
                {
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": 9,
                    "displayTitle": "Recharge timer",
                    "displayScale": 10,
                    "displayUnits": "Milli Seconds"
                },
                {
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": 10,
                    "displayTitle": "Fire Delay",
                    "displayScale": 10,
                    "displayUnits": "Milli Seconds"
                }
            ]
        }
    ],
    "eventVariables": [
        {
            "type": "EventVariableBitArray",
            "eventVariableIndex": 1,
            "displayTitle": "Output pairs active",
            "bitCollection": [
                {
                    "bitPosition": pos,
                    "label": f"pair {pos*2+1}&{pos*2+2}"
                } for pos in range(0, 4)
            ]
        },
        {
            "type": "EventVariableBitArray",
            "eventVariableIndex": 2,
            "displayTitle": "Reverse Polarity",
            "bitCollection": [
                {
                    "bitPosition": pos,
                    "label": f"pair {pos*2+1}&{pos*2+2}"
                } for pos in range(0, 4)
            ]
        }
    ]
}

json.dump(data, sys.stdout, indent=2)
print("")
