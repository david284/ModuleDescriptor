# Generate descriptor file for CANCMD modules.
# Use this script to avoid duplication and reduce maintenance.

import json
import sys
from sys import argv
from datetime import datetime, timezone
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-v", "--version", help="Firmware version")
parser.add_argument("-t", "--type", help="Module type")
args = parser.parse_args()

# default capabilities
moduleType = "CMD"
moduleName = "CANCMD"

if args.type == "CMD":
    nothing = True
elif args.type == "CMDB":
    moduleType = "CMDB"
    moduleName = "CANCMDB"
elif args.type == "CSB":
    moduleType = "CSB"
    moduleName = "CANCSB"
elif args.type is not None:
    print(f"Unknown module type '{args.type}'")
    exit(1)

now = datetime.now(timezone.utc)
datestring = f"{now.year}{now.month:02}{now.day:02}{now.hour:02}{now.minute:02}"
commandLine = " ".join(argv)

data = {
    "generated": f"Generated by {commandLine}",
    "timestamp": datestring,
    "moduleName": moduleName,
    "nodeVariables": [
        {
            "displayTitle": "Running",
            "type": "NodeVariableGroup",
            "groupItems": [
                {
                    "displayTitle": "Silent",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 2,
                    "bit": 0
                },
                {
                    "displayTitle": "Permit Steal",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 2,
                    "bit": 1
                },
                {
                    "displayTitle": "Permit Share",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 2,
                    "bit": 2
                },
                {
                    "displayTitle": "Stop on Timeout",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 2,
                    "bit": 5
                },
                {
                    "displayTitle": "Walkabout Timeout",
                    "type": "NodeVariableSlider",
                    "displayUnits": "s",
                    "nodeVariableIndex": 5
                },
                {
                    "displayTitle": "Track Off if Stop All",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 3,
                    "bit": 4
                },
                {
                    "displayTitle": "Maximum Speed",
                    "type": "NodeVariableSlider",
                    "displayUnits": "%",
                    "displayScale": 0.769,
                    "max" : 130,
                    "nodeVariableIndex": 16
                }
            ]
        },
        {
            "displayTitle": "Shuttles",
            "type": "NodeVariableGroup",
            "groupItems": [
                {
                    "displayTitle": "Enable Shuttles",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 2,
                    "bit": 7
                },
                {
                    "displayTitle": "Honk Interval",
                    "visibilityLogic": { "nvBit": {"index": 2, "bit": 7}, "equals": 1},
                    "type": "NodeVariableSlider",
                    "displayUnits": "iterations",
                    "nodeVariableIndex": 15
                }
            ] + (
            [
                {
                    "displayTitle": "Enable TOTI Inputs",
                    "visibilityLogic": { "nvBit": {"index": 2, "bit": 7}, "equals": 1},
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 3,
                    "bit": 5
                }
            ] if moduleType != "CMD" else [])
        },
        {
            "displayTitle": "Event Control",
            "type": "NodeVariableGroup",
            "groupItems": [

                {
                    "displayTitle": "Permit Event Reset",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 2,
                    "bit": 3
                },
                {
                    "displayTitle": "Map Event",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 2,
                    "bit": 4
                },
                {
                    "displayTitle": "Start of Day",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 2,
                    "bit": 6
                },
                {
                    "displayTitle": "SoD Delay",
                    "visibilityLogic": { "nvBit":{"index":2, "bit":6}, "equals": 1 },
                    "type": "NodeVariableSlider",
                    "displayUnits": "s",
                    "displayScale": 0.5,
                    "displayOffset": 2,
                    "nodeVariableIndex": 14
                },
                {
                    "displayTitle": "DCC Accessory Mapped Node",
                    "type": "NodeVariableDual",
                    "nodeVariableIndexHigh": 11,
                    "nodeVariableIndexLow": 12
                }
            ]
        },
        {
            "displayTitle": "Track Power Control",
            "type": "NodeVariableGroup",
            "groupItems": ([
                {
                    "displayTitle": "J7 Jumper Control",
                    "type": "NodeVariableSelect",
                    "nodeVariableIndex": 3,
                    "bitMask": 3,
                    "options": [
                        {"label": "Use J7", "value": 2},
                        {"label": "Use J7", "value": 3},
                        {"label": "Main Output", "value": 0},
                        {"label": "Use Booster", "value": 1}
                    ]
                }
            ] if moduleType == "CMD" else []) +
            [
                {
                    "displayTitle": "Main Current Limit",
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": 6
                },
                {
                    "displayTitle": "Service Current Limit",
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": 7
                },
                {
                    "displayTitle": "Current Multiplier",
                    "type": "NodeVariableSlider",
                    "displayUnits": "* x mA",
                    "nodeVariableIndex": 8
                },
                {
                    "displayTitle": "ZTC Mode",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 3,
                    "bit": 3
                },
                {
                    "displayTitle": "Enable Railcom Cutout",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 3,
                    "bit": 6
                },
                {
                    "displayTitle": "Increase for ACK Pulses",
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": 9
                },
                {
                    "displayTitle": "Send Current Interval",
                    "type": "NodeVariableSlider",
                    "displayUnits": "s",
                    "nodeVariableIndex": 13
                }
            ] + (
            [
                {
                    "displayTitle": "Shoot Through Delay",
                    "type": "NodeVariableSlider",
                    "displayUnits": "ms",
                    "displayScale": 0.5,
                    "nodeVariableIndex": 10
                }
            ] if moduleType == "CMDB" else [] )
        },
        {
            "displayTitle": "Not Implemented",
            "type": "NodeVariableGroup",
            "groupItems": [
                {
                    "displayTitle": "Command Station Number",
                    "type": "NodeVariableNumber",
                    "nodeVariableIndex": 1
                },
                {
                    "displayTitle": "Analogue Detection",
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 3,
                    "bit": 2
                }
            ]
        }
    ],
    "eventVariables": [
    ]
}

json.dump(data, sys.stdout, indent=2)
print("")
