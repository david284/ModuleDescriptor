# Generate descriptor file for CANMIO-Universal modules.
# Use this script to avoid duplication and reduce maintenance.

# Version 3d adds:
#  * Support for PIC18F26K80 which supports the ANALOGUE and MAGNET I/O types.
# Version 3e adds:
#  * Support for 180 degree servo movement.

import json
import sys
from sys import argv
from datetime import datetime, timezone
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-v", "--version", help="Firmware version")
parser.add_argument("-t", "--type", help="Module type")
parser.add_argument("-p", "--processor", help="Processor type")
args = parser.parse_args()

# default capabilities
moduleType = "MIO"
moduleName="CANMIO"
eventVariables=20
channels=16
processorSeries="K"
hasAnalogue = False
hasServo180 = False
canPreventDefaultEvents = False

if args.type == "MIO":
    nothing = True
elif args.type == "XIO":
    moduleType = "XIO"
    moduleName = "CANXIO"
    channels = 24
elif args.type is not None:
    print(f"Unknown module type '{args.type}'")
    exit(1)

if args.processor == "21":
    # PIC18F27Q84
    processorSeries = "Q"
elif args.processor == "22":
    # PIC18F47Q84
    processorSeries = "Q"
elif args.processor == "23":
    # PIC18F27Q83
    processorSeries = "Q"
elif args.processor is not None:
    print(f"Unsupported processor ID ({args.processor})")
    exit(1)

if args.version == "3a" or args.version == "3c":
    nothing = True
elif args.version == "3d":
    hasAnalogue = True
elif args.version == "3e":
    hasAnalogue = True
    hasServo180 = True
elif args.version == "4a":
    hasAnalogue = True
    hasServo180 = True
elif args.version == "4b":
    hasAnalogue = True
    hasServo180 = True
    canPreventDefaultEvents = True
else:
    print(f"Unknown version '{args.version}'")
    exit(1)

now = datetime.now(timezone.utc)
datestring = f"{now.year}{now.month:02}{now.day:02}{now.hour:02}{now.minute:02}"

commandLine = " ".join(argv)
data = {
    "generated": f"Generated by {commandLine}",
    "timestamp": datestring,
    "moduleName": moduleName
}

nodeVariables = [
    {
        "type": "NodeVariableTabs",
        "tabPanels": [
            {
                "displayTitle": "Globals",
                "items": [
                    {
                        "type": "NodeVariableSlider",
                        "nodeVariableIndex": 1,
                        "displayTitle": "Produced startup event Delay",
                        "displaySubTitle": "0.1 second steps, starting at 2",
                        "displayUnits": "seconds",
                        "displayScale": 0.1,
                        "displayOffset": 2
                    },
                    {
                        "type": "NodeVariableNumber",
                        "nodeVariableIndex": 2,
                        "displayTitle": "Heartbeat Delay",
                        "displaySubTitle": "not yet implemented",
                        "displayUnits": "milliseconds"
                    },
                    {
                        "type": "NodeVariableSlider",
                        "nodeVariableIndex": 5,
                        "displayTitle": "Time delay between response messages",
                        "displaySubTitle": "1 millisecond steps",
                        "displayUnits": "milliseconds"
                    },
                    {
                        "type": "NodeVariableNumber",
                        "nodeVariableIndex": 3,
                        "displayTitle": "Multi Servo speed",
                        "displaySubTitle": "If >234 moves this amount every 100ms. If <= 234 number of 20ms periods per step",
                        "displayUnits": "milliseconds"
                    }
                ]
            }
        ]
    }
]
if processorSeries == "K":
    nodeVariables[0]["tabPanels"][0]["items"].append({
        "type": "NodeVariableBitArray",
        "nodeVariableIndex": 4,
        "displayTitle": "PORTB Pullups",
        "displaySubTitle": "",
        "bitCollection": [
            {"bitPosition": 0, "label": "Channel 9"},
            {"bitPosition": 1, "label": "Channel 10"},
            {"bitPosition": 4, "label": "Channel 11"},
            {"bitPosition": 5, "label": "Channel 12"}
        ]
    })
elif processorSeries == "Q":
    nodeVariables[0]["tabPanels"][0]["items"].extend([
        {
            "type": "NodeVariableBitArray",
            "nodeVariableIndex": 6,
            "displayTitle": "Pullups for channels 1-8",
            "displaySubTitle": "",
            "bitCollection":[
                {"bitPosition": 0, "label": "Channel 1"},
                {"bitPosition": 1, "label": "Channel 2"},
                {"bitPosition": 2, "label": "Channel 3"},
                {"bitPosition": 3, "label": "Channel 4"},
                {"bitPosition": 4, "label": "Channel 5"},
                {"bitPosition": 5, "label": "Channel 6"},
                {"bitPosition": 6, "label": "Channel 7"},
                {"bitPosition": 7, "label": "Channel 8"}
            ]
        },
        {
            "type": "NodeVariableBitArray",
            "nodeVariableIndex": 7,
            "displayTitle": "Pullups for channels 9-16",
            "displaySubTitle": "",
            "bitCollection":[
                {"bitPosition": 0, "label": "Channel 9"},
                {"bitPosition": 1, "label": "Channel 10"},
                {"bitPosition": 2, "label": "Channel 11"},
                {"bitPosition": 3, "label": "Channel 12"},
                {"bitPosition": 4, "label": "Channel 13"},
                {"bitPosition": 5, "label": "Channel 14"},
                {"bitPosition": 6, "label": "Channel 15"},
                {"bitPosition": 7, "label": "Channel 16"}
            ]
        }
    ])
if canPreventDefaultEvents:
    nodeVariables[0]["tabPanels"][0]["items"].append({
        "type": "NodeVariableBitArray",
        "nodeVariableIndex": 10,
        "displayTitle": "Module flags",
        "displaySubTitle": "",
        "bitCollection": [
            {"bitPosition": 0, "label": "Prevent default event creation"}
        ]
    })

for ch in range(1, channels + 1):
    ioTypes = [
        {"label": "INPUT", "value": 0},
        {"label": "OUTPUT", "value": 1},
        {"label": "SERVO", "value": 2},
        {"label": "BOUNCE", "value": 3},
        {"label": "MULTI", "value": 4}
    ]
    if hasAnalogue and (processorSeries == "Q" or (9 <= ch <= channels and ch != 12)):
        ioTypes.extend([
            {"label": "ANALOGUE", "value": 5},
            {"label": "MAGNET", "value": 6}
        ])
    channelDef = {
        "displayTitle": f"Channel {ch}",
        "items": [
            {
                "type": "NodeVariableSelect",
                "nodeVariableIndex": 9 + ch * 7,
                "displayTitle": "I/O type",
                "displaySubTitle": "",
                "options": ioTypes,
                "linkedVariables": {
                    "NV": list(range(10 + ch * 7, 16 + ch * 7))
                }
            },
            {
                "type": "NodeVariableSlider",
                "comment": "input type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 0},
                "nodeVariableIndex": 11 + ch * 7,
                "displayTitle": "ON delay",
                "displaySubTitle": "input specific",
                "displayUnits": "milliseconds",
                "displayScale": 5
            },
            {
                "type": "NodeVariableSlider",
                "comment": "output type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 1},
                "nodeVariableIndex": 11 + ch * 7,
                "displayTitle": "Pulse duration",
                "displaySubTitle": "output specific",
                "displayUnits": "seconds",
                "displayScale": 0.1
            },
            {
                "type": "NodeVariableSlider",
                "comment": "servo type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 2},
                "nodeVariableIndex": 11 + ch * 7,
                "displayTitle": "OFF position",
                "displaySubTitle": "servo specific",
                "displayUnits": "steps",
                "outputOnWrite": True
            },
            {
                "type": "NodeVariableSlider",
                "comment": "bounce type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 3},
                "nodeVariableIndex": 11 + ch * 7,
                "displayTitle": "UPPER position",
                "displaySubTitle": "bounce specific",
                "displayUnits": "steps",
                "outputOnWrite": True
            },
            {
                "displayTitle": "number of positions",
                "displaySubTitle": "multi specific",
                "comment": "multi type only",
                "type": "NodeVariableSelect",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 4},
                "nodeVariableIndex": 11 + ch * 7,
                "options": [
                    {"label": "1 position", "value": 1},
                    {"label": "2 positions", "value": 2},
                    {"label": "3 positions", "value": 3},
                    {"label": "4 positions", "value": 4}
                ]
            },
            {
                "type": "NodeVariableSlider",
                "comment": "input type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 0},
                "nodeVariableIndex": 12 + ch * 7,
                "displayTitle": "OFF delay",
                "displaySubTitle": "input specific",
                "displayUnits": "milliseconds",
                "displayScale": 5
            },
            {
                "type": "NodeVariableSlider",
                "comment": "output type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 1},
                "nodeVariableIndex": 12 + ch * 7,
                "displayTitle": "Flash period",
                "displaySubTitle": "output specific",
                "displayUnits": "seconds",
                "displayScale": 0.1
            },
            {
                "type": "NodeVariableSlider",
                "comment": "servo type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 2},
                "nodeVariableIndex": 12 + ch * 7,
                "displayTitle": "ON position",
                "displaySubTitle": "servo specific",
                "displayUnits": "steps",
                "outputOnWrite": True
            },
            {
                "type": "NodeVariableSlider",
                "comment": "bounce type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 3},
                "nodeVariableIndex": 12 + ch * 7,
                "displayTitle": "LOWER position",
                "displaySubTitle": "bounce specific",
                "displayUnits": "steps",
                "outputOnWrite": True
            },
            {
                "type": "NodeVariableSlider",
                "comment": "multi type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 4},
                "nodeVariableIndex": 12 + ch * 7,
                "displayTitle": "pos 1",
                "displaySubTitle": "multi specific",
                "displayUnits": "steps",
                "outputOnWrite": True
            },
            {
                "type": "NodeVariableSlider",
                "comment": "servo type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 2},
                "nodeVariableIndex": 13 + ch * 7,
                "displayTitle": "OFF to ON speed",
                "displaySubTitle": "servo specific",
                "displayUnits": "",
                "min": 230
            },
            {
                "type": "NodeVariableSlider",
                "comment": "bounce type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 3},
                "nodeVariableIndex": 13 + ch * 7,
                "displayTitle": "Bounce coefficient",
                "displaySubTitle": "bounce specific",
                "displayUnits": " %"
            },
            {
                "type": "NodeVariableSlider",
                "comment": "multi type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 4},
                "nodeVariableIndex": 13 + ch * 7,
                "displayTitle": "pos 2",
                "displaySubTitle": "multi specific",
                "displayUnits": "steps",
                "outputOnWrite": True
            },
            {
                "type": "NodeVariableSlider",
                "comment": "servo type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 2},
                "nodeVariableIndex": 14 + ch * 7,
                "displayTitle": "ON to OFF speed",
                "displaySubTitle": "servo specific",
                "displayUnits": "",
                "min": 230
            },
            {
                "type": "NodeVariableSlider",
                "comment": "bounce type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 3},
                "nodeVariableIndex": 14 + ch * 7,
                "displayTitle": "Pull speed",
                "displaySubTitle": "bounce specific",
                "displayUnits": "milliseconds",
                "displayScale": 20
            },
            {
                "type": "NodeVariableSlider",
                "comment": "multi type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 4},
                "nodeVariableIndex": 14 + ch * 7,
                "displayTitle": "pos 3",
                "displaySubTitle": "multi specific",
                "displayUnits": "steps",
                "outputOnWrite": True
            },
            {
                "type": "NodeVariableSlider",
                "comment": "bounce type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 3},
                "nodeVariableIndex": 15 + ch * 7,
                "displayTitle": "Pull pause",
                "displaySubTitle": "bounce specific",
                "displayUnits": "milliseconds",
                "displayScale": 20
            },
            {
                "type": "NodeVariableSlider",
                "comment": "multi type only",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 4},
                "nodeVariableIndex": 15 + ch * 7,
                "displayTitle": "pos 4",
                "displaySubTitle": "multi specific",
                "displayUnits": "steps",
                "outputOnWrite": True
            }
        ],
        "comment": f"end of channel {ch}"
    }
    if hasAnalogue:
        analogueItems = [
            {
                "displayTitle": "magnet setup",
                "displaySubTitle": "ADC offset",
                "comment": "magnet type only",
                "type": "NodeVariableSlider",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 6},
                "nodeVariableIndex": 11 + ch * 7,
                "displayUnits": "ADC units, in 1.22mV steps"
            },
            {
                "displayTitle": "Threshold",
                "displaySubTitle": "analog specific",
                "comment": "analog type only",
                "type": "NodeVariableSlider",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 5},
                "nodeVariableIndex": 12 + ch * 7,
                "displayUnits": "Volts",
                "displayScale": 0.0196
            },
            {
                "displayTitle": "Threshold",
                "displaySubTitle": "magnet specific",
                "comment": "analog type only",
                "type": "NodeVariableSlider",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 6},
                "nodeVariableIndex": 12 + ch * 7,
                "displayUnits": "ADC units, in 1.22mV steps"
            },
            {
                "displayTitle": "Hysteresis",
                "displaySubTitle": "analogue specific",
                "comment": "analogue type only",
                "type": "NodeVariableSlider",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 5},
                "nodeVariableIndex": 13 + ch * 7,
                "displayUnits": "Volts",
                "displayScale": 0.0196
            },
            {
                "displayTitle": "Hysteresis",
                "displaySubTitle": "magnet specific",
                "comment": "magnet type only",
                "type": "NodeVariableSlider",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 6},
                "nodeVariableIndex": 13 + ch * 7,
                "displayUnits": "ADC units, in 1.22mV steps"
            },
            {
                "displayTitle": "Offset H",
                "displaySubTitle": "magnet specific",
                "comment": "magnet type only",
                "type": "NodeVariableSlider",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 6},
                "nodeVariableIndex": 14 + ch * 7,
                "displayUnits": "ADC units, in 1.22mV steps"
            },
            {
                "displayTitle": "Offset L",
                "displaySubTitle": "magnet specific",
                "comment": "magnet type only",
                "type": "NodeVariableSlider",
                "visibilityLogic": {"nv": 9 + ch * 7, "equals": 6},
                "nodeVariableIndex": 15 + ch * 7,
                "displayUnits": "ADC units, in 1.22mV steps"
            }
        ]
        channelDef["items"].extend(analogueItems)

    channelDef["items"].sort(key=lambda item: (
        item["nodeVariableIndex"],
        item["visibilityLogic"]["equals"] if "visibilityLogic" in item else 0))

    # Flags shall be last
    channelDef["items"].append({
        "type": "NodeVariableBitArray",
        "nodeVariableIndex": 10 + ch * 7,
        "displayTitle": "Flags",
        "bitCollection": [
            {
                "bitPosition": 0,
                "overload": {
                    "nv": 9 + ch * 7,
                    "labels": [
                        {"value": 0, "label": "TRIGGER_INVERTED"},
                        {"value": 1, "label": "TRIGGER_INVERTED"},
                        {"value": 2, "label": "TRIGGER_INVERTED"},
                        {"value": 3, "label": "TRIGGER_INVERTED"},
                        {"value": 4, "label": "TRIGGER_INVERTED"}
                    ]
                }
            },
            {
                "bitPosition": 1,
                "overload": {
                    "nv": 9 + ch * 7,
                    "labels": [
                        {"value": 2, "label": "CUTOFF"},
                        {"value": 3, "label": "CUTOFF"},
                        {"value": 4, "label": "CUTOFF"}
                    ]
                }
            },
            {
                "bitPosition": 2,
                "overload": {
                    "nv": 9 + ch * 7,
                    "labels": [
                        {"value": 1, "label": "STARTUP"},
                        {"value": 2, "label": "STARTUP"},
                        {"value": 3, "label": "STARTUP"},
                        {"value": 4, "label": "STARTUP"}
                    ]
                }
            },
            {
                "bitPosition": 3,
                "overload": {
                    "nv": 9 + ch * 7,
                    "labels": [
                        {"value": 0, "label": "DISABLE_OFF"},
                        {"value": 1, "label": "DISABLE_OFF"}
                    ] + ([
                        {"value": 5, "label": "DISABLE_OFF"},
                        {"value": 6, "label": "DISABLE_OFF"}
                    ] if hasAnalogue else [])
                }
            },
            {
                "bitPosition": 4,
                "overload": {
                    "nv": 9 + ch * 7,
                    "labels": [
                        {"value": 0, "label": "TOGGLE"},
                        {"value": 2, "label": "PULLUP"},
                        {"value": 3, "label": "PULLUP"},
                        {"value": 4, "label": "PULLUP"}
                    ]
                }
            },
            {
                "bitPosition": 5,
                "overload": {
                    "nv": 9 + ch * 7,
                    "labels": [
                        {"value": 0, "label": "INPUT_DISABLE_SOD_RESPONSE"},
                        {"value": 1, "label": "ACTION_INVERTED"},
                        {"value": 2, "label": "ACTION_INVERTED"},
                        {"value": 3, "label": "ACTION_INVERTED"},
                        {"value": 4, "label": "ACTION_INVERTED"}
                    ] + ([
                        {"value": 5, "label": "INPUT_DISABLE_SOD_RESPONSE"},
                        {"value": 6, "label": "INPUT_DISABLE_SOD_RESPONSE"}
                    ] if hasAnalogue else [])
                }
            },
            {
                "bitPosition": 6,
                "label": "EVENT_INVERTED"
            },
            {
                "bitPosition": 7,
                "overload":
                    {
                        "nv": 9 + ch * 7,
                        "labels": [
                            {"value": 1, "label": "ACTION_EXPEDITED"}
                        ] + ([
                            {"value": 2, "label": "EXTENDED 180 DEGREE RANGE"},
                            {"value": 3, "label": "EXTENDED 180 DEGREE RANGE"},
                            {"value": 4, "label": "EXTENDED 180 DEGREE RANGE"}
                        ] if hasServo180 else [])
                    }
            }
        ]
    })
    nodeVariables[0]["tabPanels"].append(channelDef)
data["nodeVariables"] = nodeVariables

eventVariables = [
    {
        "type": "EventVariableSelect",
        "eventVariableIndex": 1,
        "displayTitle": "Produced event",
        "displaySubTitle": "EV1",
        "options": [
            {"value": 0, "label": "no event (0)"},
            {"value": 1, "label": "Startup event (1)"},
        ],
        "comment": "end of EV1"
    }
]
for ch in range(1, channels + 1):
    eventVariables[0]["options"].extend([
        {
            "value": 4 + ch * 4,
            "overload": {
                "nv": 9 + ch * 7,
                "labels": [
                              {"value": 0, "label": f"CH{ch} - Input Changed"},
                              {"value": 1, "label": f"CH{ch} - Output Changed"},
                              {"value": 2, "label": f"CH{ch} - Reached OFF"},
                              {"value": 3, "label": f"CH{ch} - Output Changed"},
                              {"value": 4, "label": f"CH{ch} - AT1"},
                          ] + ([
                                   {"value": 5, "label": f"CH{ch} - Threshold"},
                                   {"value": 6, "label": f"CH{ch} - Lower Threshold"}
                               ] if hasAnalogue else [])
            }
        },
        {
            "value": 5 + ch * 4,
            "overload": {
                "nv": 9 + ch * 7,
                "labels": [
                              {"value": 0, "label": f"CH{ch} - TWO_ON"},
                              {"value": 2, "label": f"CH{ch} - Reached MID"},
                              {"value": 4, "label": f"CH{ch} - AT2"},
                          ] + ([
                                   {"value": 6, "label": f"CH{ch} - Upper Threshold"}
                               ] if hasAnalogue else [])
            }
        },
        {
            "value": 6 + ch * 4,
            "overload": {
                "nv": 9 + ch * 7,
                "labels": [
                    {"value": 2, "label": f"CH{ch} - Reached ON"},
                    {"value": 4, "label": f"CH{ch} - AT3"}
                ]
            }
        },
        {
            "value": 7 + ch * 4,
            "overload": {
                "nv": 9 + ch * 7,
                "labels": [
                    {"value": 4, "label": f"CH{ch} - AT4"}
                ]
            }
        }
    ])

for ev in range(2, 20 + 1):
    evDef = {
        "displayTitle": f"Consumed Event - EV{ev}",
        "type": "EventVariableGroup",
        "groupItems": [
            {
                "type": "EventVariableSelect",
                "bitMask": 127,
                "eventVariableIndex": ev,
                "displayTitle": "Action",
                "options": [
                    {"value": 0, "label": "no action"},
                    {"value": 1, "label": "Consumed SOD"},
                    {"value": 2, "label": "Wait 0.5s"},
                    {"value": 3, "label": "Wait 1s"},
                    {"value": 4, "label": "Wait 2s"},
                    {"value": 5, "label": "Wait 5s"},
                    {"value": 7, "label": "Stop Processing"}
                ],
                "comment": f"end of EV{ev}"
            },
            {
                "displayTitle": "Simultaneous",
                "type": "EventVariableBitSingle",
                "eventVariableIndex": ev,
                "bit": 7
            }
        ]
    }
    for ch in range(1, channels + 1):
        evDef["groupItems"][0]["options"].extend([
            {
                "value": 3 + ch * 5,
                "overload": {
                    "nv": 9 + ch * 7,
                    "labels": [
                        {"value": 1, "label": f"CH{ch} - Change"},
                        {"value": 2, "label": f"CH{ch} - Change"},
                        {"value": 3, "label": f"CH{ch} - Change"},
                        {"value": 4, "label": f"CH{ch} - AT1"}
                    ]
                }
            },
            {
                "value": 4 + ch * 5,
                "overload": {
                    "nv": 9 + ch * 7,
                    "labels": [
                        {"value": 1, "label": f"CH{ch} - ON"},
                        {"value": 2, "label": f"CH{ch} - ON"},
                        {"value": 3, "label": f"CH{ch} - ON"},
                        {"value": 4, "label": f"CH{ch} - AT2"}
                    ]
                }
            }, 
            {
                "value": 5 + ch * 5,
                "overload": {
                    "nv": 9 + ch * 7,
                    "labels": [
                        {"value": 1, "label": f"CH{ch} - OFF"},
                        {"value": 2, "label": f"CH{ch} - OFF"},
                        {"value": 3, "label": f"CH{ch} - OFF"},
                        {"value": 4, "label": f"CH{ch} - AT3"}
                    ]
                }
            }, 
            {
                "value": 6 + ch * 5,
                "overload": {
                    "nv": 9 + ch * 7,
                    "labels": [
                        {"value": 1, "label": f"CH{ch} - FLASH"},
                        {"value": 4, "label": f"CH{ch} - AT4"}
                    ]
                }
            },
            {
                "value": 7 + ch * 5,
                "overload": {
                    "nv": 9 + ch * 7,
                    "labels": [
                        {"value": 1, "label": f"CH{ch} - !Change"},
                        {"value": 2, "label": f"CH{ch} - !Change"},
                        {"value": 3, "label": f"CH{ch} - !Change"}
                    ]
                }
            }
        ])
    eventVariables.append(evDef)

data["eventVariables"] = eventVariables

json.dump(data, sys.stdout, indent=2)
print("")
