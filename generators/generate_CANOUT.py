# Generate descriptor file for CANACE8C, CANACE8CMIO, CANTOTI and CANINP: modules.
# Use this script to avoid duplication and reduce maintenance.

import json
import sys
from sys import argv
from datetime import datetime, timezone
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-v", "--version", help="Firmware version")
parser.add_argument("-t", "--type", help="Module type")
args = parser.parse_args()

# default capabilities
moduleName = "CANACC8"
channels = 8

if args.type == "OUT":
    moduleName = "CANOUT"
if args.type == "MIO":
    moduleName = "CANMIO-OUT"
if args.type == "BIP":
    moduleName = "CANBIP-OUT"

now = datetime.now(timezone.utc)
datestring = f"{now.year}{now.month:02}{now.day:02}{now.hour:02}{now.minute:02}"
commandLine = " ".join(argv)

data = {
    "generated": f"Generated by {commandLine}",
    "timestamp": datestring,
    "moduleName": moduleName,
    "numberOfChannels": channels,
    "channelNames": {str(ch): f"Output {ch}" for ch in range(1, channels + 1)},
    "nodeVariables": [
        {
            "type": "NodeVariableGroup",
            "displayTitle": f"${{channel {ch}}}",
            "groupItems": [
                {
                    "type": "NodeVariableSlider",
                    "nodeVariableIndex": ch,
                    "displayTitle": "Pulse Duration",
                    "displaySubTitle": "Range 0 to 2,540 milliSeconds",
                    "displayScale": 20,
                    "displayUnits": "mS",
                    "startBit": 0,
                    "endBit": 6,
                    "max": 127,
                    "min": 0
                },
                {
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": ch,
                    "displayTitle": "Repeat enabled",
                    "bit": 7
                },
                {
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 11,
                    "displayTitle": "Startup action on/off",
                    "bit": ch - 1
                },
                {
                    "type": "NodeVariableBitSingle",
                    "nodeVariableIndex": 10,
                    "displayTitle": "Startup action",
                    "displaySubTitle": "Saved action, OFF if not set",
                    "bit": ch - 1
                }
            ]
        } for ch in range(1, channels + 1)
    ] + [
        {
            "type": "NodeVariableSlider",
            "nodeVariableIndex": 9,
            "displayTitle": "Feedback Delay",
            "displaySubTitle": "Range 0 to 127.5mS",
            "displayScale": 0.5,
            "displayUnits": "mS"
        }
    ],
    "eventVariables": [
        {
            "displayTitle": "Event Direction",
            "type": "EventVariableSelect",
            "visibilityLogic": {
                "JLL": {
                    "or": [
                        {
                            "==": [
                                {
                                    "EVbit": [
                                        3,
                                        0
                                    ]
                                },
                                False
                            ]
                        },
                        {
                            "==": [
                                {
                                    "EVbit": [
                                        3,
                                        1
                                    ]
                                },
                                False
                            ]
                        }
                    ]
                }
            },
            "eventVariableIndex": 3,
            "bitMask": 128,
            "options": [
                {
                    "value": 0,
                    "label": "Consumed Event"
                },
                {
                    "value": 128,
                    "label": "Produced Event"
                }
            ]
        },
        {
            "displayTitle": "Consumed Event",
            "type": "EventVariableGroup",
            "visibilityLogic": {
                "JLL": {
                    "==": [
                        {
                            "EVbit": [
                                3,
                                7
                            ]
                        },
                        False
                    ]
                }
            },
            "groupItems":
            [
                {
                    "displayTitle": f"${{channel {ch}}}",
                    "type": "EventVariableGroup",
                    "groupItems": [
                        {
                            "displayTitle": "Set Output",
                            "type": "EventVariableBitSingle",
                            "eventVariableIndex": 1,
                            "bit": ch - 1
                        },
                        {
                            "displayTitle": "Polarity",
                            "type": "EventVariableSelect",
                            "eventVariableIndex": 2,
                            "bitMask": 1 << (ch - 1),
                            "options": [
                                {"value": 0, "label": "Normal"},
                                {"value": 1 << (ch - 1), "label": "Invert"}
                            ]
                        }
                    ]
                } for ch in range(1, channels + 1)
            ] + [
                {
                    "type": "EventVariableSelect",
                    "eventVariableIndex": 3,
                    "displayTitle": "Start of Day",
                    "displaySubTitle": "Actions feedback events",
                    "bitMask": 3,
                    "options": [
                        {
                            "label": "disabled",
                            "value": 0
                        },
                        {
                            "label": "disabled",
                            "value": 1
                        },
                        {
                            "label": "disabled",
                            "value": 2
                        },
                        {
                            "label": "enabled",
                            "value": 3
                        }
                    ]
                }
            ]
        },
        {
            "displayTitle": "Produced Event",
            "type": "EventVariableGroup",
            "visibilityLogic": {
                "JLL": {
                    "==": [
                        {
                            "EVbit": [
                                3,
                                7
                            ]
                        },
                        True
                    ]
                }
            },
            "groupItems": [
                {
                    "type": "EventVariableSelect",
                    "eventVariableIndex": 3,
                    "displayTitle": "Output select",
                    "bitMask": 28,
                    "options": [
                        {
                            "label": f"${{channel {ch}}}",
                            "value": (ch - 1) * 4
                        } for ch in range(1, channels + 1)
                    ]
                },
                {
                    "type": "EventVariableSelect",
                    "eventVariableIndex": 3,
                    "displayTitle": "Event",
                    "displaySubTitle": "remember to select the correct output",
                    "bitMask": 3,
                    "options": [
                        {
                            "label": "On event",
                            "value": 0
                        },
                        {
                            "label": "Off event",
                            "value": 1
                        },
                        {
                            "label": "Do Nothing",
                            "value": 2
                        }
                    ]
                }
            ]
        }
    ]
}

json.dump(data, sys.stdout, indent=2)
print("")
